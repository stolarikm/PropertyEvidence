package backend;

import common.IllegalEntityException;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

/**
 * Interface for manipulation with clients.
 *
 * @author Michal Stol√°rik 456173@mail.muni.cz
 */
public interface ClientManager {
    /**
     * Stores new client into the database. Client's id attribute is generated by this method.
     *
     * @param client client instance to initialize.
     * @throws IllegalArgumentException when the client argument is null
     * @throws IllegalEntityException when the client argument has invalid attribute values
     */
    void createClient(Client client) throws IllegalArgumentException, IllegalEntityException;

    /**
     * Updates client in database.
     *
     * @param client client instance to update.
     * @throws IllegalArgumentException when the client argument is null
     * @throws IllegalEntityException when the client argument has invalid attribute values
     */
    void updateClient(Client client) throws IllegalArgumentException, IllegalEntityException;

    /**
     * Deletes client from database.
     *
     * @param client client instance to delete
     * @throws IllegalArgumentException when the client argument is null
     * @throws IllegalEntityException when the client argument has invalid attribute values
     */
    void deleteClient(Client client) throws IllegalArgumentException, IllegalEntityException;

    /**
     * Returns list of all clients in database.
     *
     * @return list of all clients in database.
     */
    List<Client> getClients();

    /**
     * Returns list of all clients with matching name.
     *
     * @param subName string to match with client name.
     * @return list of all Clients whose names contain substring subName.
     * @throws IllegalEntityException when the client argument has invalid attribute values
     */
    List<Client> findClientsByName(String subName) throws IllegalArgumentException;

    /**
     * Retrieves client from database by its id
     *
     * @param id primary key
     * @return retrieved client
     */
    Client getClientById(Long id);


    /**
     * Help method for getClientById
     *
     * @param st prepared SQL statement
     * @return single Client object, or null
     * @throws SQLException when error occurs while retrieving client
     */
    Client retrieveClient(PreparedStatement st) throws SQLException;
}
